// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = jQuery;

  $.fn.exslides = function(options) {
    var opts;
    opts = $.extend({}, $.fn.exslides.defaults, options);
    return this.each(function() {
      var $elements, $offset, $slideWidth, $slideWidthIni, $slideWrap, $slides, $this, activeSlide, busy, calculatePositionWidth, doSlide, getSlidePosition, has3d, slWrap, slideInterval,
        _this = this;
      $this = $(this);
      $slides = $elements = $(this).children();
      busy = false;
      if ($slides.length < 2) {
        $slides.addClass('active');
        return false;
      }
      slWrap = 'r-slides-container';
      $(this).wrapInner("<div class=\"" + slWrap + "\" />");
      $slideWrap = $($this.children(0));
      $slideWidth = $slideWidthIni = $($elements[0]).width();
      $slideWidthIni = parseInt($($elements[0]).css('max-width'));
      $offset = ($this.width() - $slideWidth) / 2;
      activeSlide = 0;
      has3d = function() {
        var el, t, transforms, _i, _len;
        el = document.createElement('p');
        transforms = {
          webkitTransform: '-webkit-transform',
          OTransform: '-o-transform',
          msTransform: '-ms-transform',
          MozTransform: '-moz-transform',
          transform: 'transform'
        };
        document.body.insertBefore(el, null);
        for (_i = 0, _len = transforms.length; _i < _len; _i++) {
          t = transforms[_i];
          if (el.style[t](!void 0)) {
            el.style[t] = 'translate3d(1px,1px,1px)';
            has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);
          }
        }
        document.body.removeChild(el);
        return has3d(!void 0 && has3d.length > 0 && has3d(!"none"));
      };
      getSlidePosition = function(dactiveSlide) {
        var $slidePosition;
        if ($this.width() <= $slideWidth) {
          $slideWidth = $this.width();
          $offset = 0;
          $slidePosition = dactiveSlide * $this.width();
        } else {
          $offset = parseInt(($this.width() - $slideWidth) / 2);
          $slidePosition = dactiveSlide * $slideWidth;
          $slideWidth = $slideWidthIni;
        }
        return $offset - ($slideWidth * 2) - $slidePosition;
      };
      calculatePositionWidth = function() {
        var $slidePosition, slidePosition, thisWidth;
        thisWidth = $this.width();
        if (thisWidth <= $slideWidth) {
          $slides.width(thisWidth);
          $slideWidth = thisWidth;
          $offset = 0;
          $slidePosition = activeSlide * thisWidth;
        } else {
          $offset = parseInt((thisWidth - $slideWidth) / 2);
          $slidePosition = activeSlide * $slideWidth;
          $slideWidth = $slideWidthIni;
        }
        slidePosition = getSlidePosition(activeSlide);
        if (has3d) {
          return $slideWrap.css('-webkit-transform', "translate3d(" + slidePosition + "px,0,0)").css('transform', "translate3d(" + slidePosition + "px,0,0)");
        } else {
          return $slideWrap.css('margin-left', $offset - ($slideWidth * 2) - $slidePosition);
        }
      };
      doSlide = function(direction) {
        var dirSign, positionAfter, slideAfter, slidePosition;
        if (direction == null) {
          direction = 'next';
        }
        if (busy) {
          return false;
        }
        busy = true;
        if (direction === 'next') {
          activeSlide++;
          dirSign = '-';
        } else if (direction === 'prev') {
          activeSlide--;
          dirSign = '+';
        }
        $($slides).removeClass('active');
        positionAfter = 0;
        slideAfter = activeSlide;
        if (activeSlide >= $elements.length) {
          $($slides[$elements.length + 2]).addClass('active');
          positionAfter = $offset - ($slideWidth * 2);
          slideAfter = 0;
        } else if (activeSlide < 0) {
          slideAfter = $elements.length - 1;
          $($slides[1]).addClass('active');
          positionAfter = $offset - ($slideWidth * ($elements.length + 1));
        } else {
          positionAfter = 0;
        }
        slidePosition = getSlidePosition(activeSlide);
        if (has3d) {
          $slideWrap.css('-webkit-transition', "" + opts.speed + "ms").css('transition', "" + opts.speed + "ms").css('-webkit-transform', "translate3d(" + slidePosition + "px,0,0)").css('transform', "translate3d(" + slidePosition + "px,0,0)");
          setTimeout(function() {
            calculatePositionWidth();
            $slideWrap.css('-webkit-transition', "0ms").css('transition', "0ms");
            if (positionAfter) {
              $slideWrap.css('-webkit-transform', "translate3d(" + positionAfter + "px,0,0)").css('transform', "translate3d(" + positionAfter + "px,0,0)");
            }
            return busy = false;
          }, opts.speed + 50);
        } else {
          $slideWrap.animate({
            'margin-left': "" + slidePosition + "px"
          }, opts.speed, opts.easing);
          setTimeout(function() {
            calculatePositionWidth();
            if (positionAfter) {
              $slideWrap.css({
                "margin-left": "" + positionAfter + "px"
              });
            }
            return busy = false;
          }, opts.speed + 50);
        }
        activeSlide = slideAfter;
        return $($elements[activeSlide]).addClass('active');
      };
      $slideWrap.prepend($($elements[$elements.length - 1]).clone()).prepend($($elements[$elements.length - 2]).clone()).append($($elements[0]).clone()).append($($elements[1]).clone());
      $slides = $slideWrap.children();
      $slideWrap.width($slideWidthIni * $($slides).length);
      if (opts.showNav) {
        $this.append("<div class=\"exslide-nav-wrap\"><div class=\"exslide-nav\"><span class=\"prev\">Prev</span><span class=\"next\">Next</span></div></div>");
        $('.exslide-nav .prev').bind('click', function() {
          clearInterval(slideInterval);
          return doSlide('prev');
        });
        $('.exslide-nav .next').bind('click', function() {
          clearInterval(slideInterval);
          return doSlide();
        });
      }
      if ($.fn.swipe) {
        $($this).swipe({
          swipe: function(event, direction, distance, duration, fingerCount) {
            if (direction === 'right') {
              clearInterval(slideInterval);
              doSlide('prev');
            }
            if (direction === 'left') {
              clearInterval(slideInterval);
              return doSlide();
            }
          }
        });
      }
      $($elements[0]).addClass('active');
      slideInterval = setInterval(function() {
        return doSlide();
      }, opts.timeout);
      calculatePositionWidth();
      return $(window).resize(function() {
        return calculatePositionWidth();
      });
    });
  };

  $.fn.exslides.defaults = {
    speed: 800,
    timeout: 5000,
    easing: 'swing',
    showNav: true
  };

}).call(this);
